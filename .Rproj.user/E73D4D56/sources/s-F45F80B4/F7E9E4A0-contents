binary.coef.values = read.csv('res/all_proteins/pred_var_values.csv')
binary.coef.values
binary.auc = read.csv('res/all_proteins/auc_sub.csv')
mean(binary.auc$x)
sd(binary.auc$x)

library(ggplot2)
library(dplyr)
library(tibble)

## count from the 100 reps
genes.count = table(binary.coef.values$names)
df.genes.count = data.frame(genes.count)
df.genes.count = df.genes.count %>% column_to_rownames(var = 'Var1')
hist(genes.count[order(genes.count, decreasing = T)])
(genes.count[order(genes.count, decreasing = T)])

coef.means = binary.coef.values %>% group_by(names) %>%
  summarize(coef_means = mean(res.coef.values, na.rm = TRUE))

## weighted coef base on number of appearances in the 100 reps
coef.means = coef.means %>% column_to_rownames(var = "names") 
coef.means
# coef.means * 
weighted.coef = coef.means * df.genes.count[rownames(coef.means),]
weighted.coef = weighted.coef[-1,, drop = FALSE]
head(weighted.coef)
weighted.coef = data.frame(scale(weighted.coef))
weighted.coef = weighted.coef[order(weighted.coef, decreasing = T),,drop = FALSE ]
weighted.coef

write.csv((genes.count[order(genes.count, decreasing = T)])[-1], 'res/all_proteins/binary_ordered_genes_count.csv')
write.csv(weighted.coef, 'res/all_proteins/binary_weighted_coef.csv')
write.csv(coef.means, 'res/all_proteins/binary_mean_coef.csv')

graph.data = coef.means
graph.data$freq = genes.count[rownames(graph.data)]
graph.data = graph.data[-1,]

graph.data$names = sapply(strsplit(rownames(graph.data),'\\.'), function(x) x[1])

library(ggrepel)
ggplot(graph.data, aes(coef_means, freq, label = names)) +
  # ggplot(graph.data, aes(freq, coef_means)) +
  geom_point(aes(color = abs(coef_means))) +
  # geom_text(aes(label=names),size = 3, hjust=-0.5, vjust=0.5) +
  # geom_text(aes(label=ifelse(freq>75,as.character(names),'')),size = 3, hjust=-0.5, vjust=0.5) +
  geom_text_repel(data          = subset(graph.data, freq > 75)) +
  # nudge_y       = 32 - subset(graph.data, freq > 25)$freq,
  # size          = 4,
  # box.padding   = 1.5,
  # point.padding = 0.5,
  # force         = 100,
  # segment.size  = 0.2,
  # segment.color = "grey50",
  # direction     = "x") +
  xlab("Average Coefficients") + 
  ylab("Frequencies") +
  labs(color='Absolute Average\ 
       Coefficients') + ## legend title
  ggtitle('Binary Prediction (Severe A)')+
  theme_bw()


