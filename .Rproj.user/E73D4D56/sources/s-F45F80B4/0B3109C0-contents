rm(list=ls())

library(EnhancedVolcano)
library(org.Mm.eg.db)

processed.res <- read.csv('processed_data/GLDS-246_rna_seq_differential_expression.csv', header = TRUE, sep = ",", row.names = 1)


processed.res[is.na(processed.res$SYMBOL), 'SYMBOL'] = rownames(processed.res)[is.na(processed.res$SYMBOL)]

library(msigdbr)
all_gene_sets = msigdbr(species = "Mus musculus")

#colnames(processed.res)[grep("^(?=.*60)(?!.*30)", colnames(processed.res), perl = T)]
#colnames(processed.res)[grep("^(?=.*60)(?!.*30)(?!.*1)(?!.*Group)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)]
#(processed.res)[,grep("^(?=.*60)(?!.*30)(?!.*1)(?!.*Group)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)]
#(processed.res)[,grep("^(?=.*60)(?!.*30)(?!.*1)(?!.*Group)(?!.*Log2fc)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)][,1]
#colnames(processed.res)[grep("^(?=.*60)(?!.*30)(?!.*1)(?!.*Group)(?!.*Log2fc)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)] 
#
#
#rownames(processed.res)[which((processed.res)[,grep("^(?=.*60)(?!.*30)(?!.*1)(?!.*Group)(?!.*Log2fc)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)][,1] < 0.05)]


#padj.sig.ind = which(processed.res[,grep("^(?=.*60)(?=.*v.Ground)(?!.*30)(?!.*1)(?!.*Group)(?!.*Log2fc)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)] < 0.05)


results_plot = function(l2fc, adj.p.val, raw.p.val, title_name){
  
  # volcano.plot = EnhancedVolcano(processed.res,
  #                                lab = processed.res$SYMBOL,
  #                                pCutoff = 0.05,
  #                                FCcutoff = 0,
  #                                x = l2fc,
  #                                y = adj.p.val,
  #                                legendPosition = 'bottom')
  # print(volcano.plot)
  
  jpeg(paste('volcano/adj_p_val_', title_name, '.jpeg', sep = ''), units="in", width=20, height=10, res=500)
  print(
  ggplot(processed.res, aes(get(l2fc), -log(get(adj.p.val),10), label = SYMBOL)) +
    # ggplot(graph.data, aes(freq, coef_means)) +
    geom_point(aes(color = ifelse(get(adj.p.val) <= 0.05, '1','0'))) +
    geom_hline(yintercept=-log(0.05, 10), linetype="dashed", color = "blue") +
    geom_vline(xintercept=0, linetype="dashed", color = "blue") +
    geom_text_repel(aes(label=ifelse(get(adj.p.val) <= 0.05, as.character(SYMBOL),'')), max.overlaps = 40) +
    # geom_text(aes(label=ifelse(get(adj.p.val) <= 0.05, as.character(SYMBOL),'')),size = 3, vjust=0.5) +
    xlab("L2FC") + 
    ylab("-log10 Adj.P.values") +
    labs(color='') + ## legend title
    theme_bw()
  )
  dev.off()
  
  jpeg(paste('volcano/raw_p_val_', title_name, '.jpeg', sep = ''), units="in", width=20, height=10, res=500)
  print(
  ggplot(processed.res, aes(get(l2fc), -log(get(raw.p.val),10), label = SYMBOL)) +
    # ggplot(graph.data, aes(freq, coef_means)) +
    geom_point(aes(color = ifelse(get(raw.p.val) <= 0.05, '1','0'))) +
    geom_hline(yintercept=-log(0.05, 10), linetype="dashed", color = "blue") +
    geom_vline(xintercept=0, linetype="dashed", color = "blue") +
    geom_text_repel(aes(label=ifelse(get(raw.p.val) <= 0.05, as.character(SYMBOL),'')), max.overlaps = 40) +
    # geom_text(aes(label=ifelse(get(raw.p.val) <= 0.05, as.character(SYMBOL),'')),size = 3, vjust=0.5) +
    xlab("L2FC") + 
    ylab("-log10 raw.P.values") +
    labs(color='') + ## legend title
    theme_bw()
  )
  dev.off()
  
  #################################### over representation analysis #######################################
  allOE_genes <- as.character(rownames(processed.res))
  #allOE_genes <- as.character(processed.res$SYMBOL)
  
  ## Extract significant results
  sigOE <- dplyr::filter((processed.res), get(adj.p.val) < 0.05)
  
  sigOE_genes <- as.character(rownames(sigOE))
  #sigOE_genes <- as.character(sigOE$SYMBOL)
  
  ## Run GO enrichment analysis
  library(DOSE)
  library(clusterProfiler)
  ego <- enrichGO(gene = sigOE_genes,
                  universe = allOE_genes,
                  keyType = "ENSEMBL",
                  # keyType = "SYMBOL",
                  OrgDb = org.Mm.eg.db,
                  ont = "ALL",
                  pAdjustMethod = "BH",
                  qvalueCutoff = 0.05,
                  readable = TRUE)
  
  if (!is.null(ego)){
    if (nrow(ego@result) > 0){
      jpeg(paste('ORA/adj_p_val_GO_', title_name, '.jpeg', sep = ''), units="in", width=10, height=10, res=500)
      print(dotplot(ego, showCategory=50))
      dev.off()
    }
    
  }
  
  allOE_genes <- as.character(rownames(processed.res))
  # allOE_genes <- as.character(processed.res$ENTREZID)
  #allOE_genes <- as.character(processed.res$SYMBOL)
  
  ## Extract significant results
  sigOE <- dplyr::filter((processed.res), get(raw.p.val) < 0.05)
  
  sigOE_genes <- as.character(rownames(sigOE))
  # sigOE_genes <- as.character(sigOE$ENTREZID)
  #sigOE_genes <- as.character(sigOE$SYMBOL)
  
  ## Run GO enrichment analysis
  library(DOSE)
  library(clusterProfiler)
  ego <- enrichGO(gene = sigOE_genes,
                  universe = allOE_genes,
                  keyType = "ENSEMBL",
                  # keyType = "SYMBOL",
                  OrgDb = org.Mm.eg.db,
                  ont = "ALL",
                  pAdjustMethod = "BH",
                  qvalueCutoff = 0.05,
                  readable = TRUE)
  
  if (!is.null(ego)){
    if (nrow(ego@result) > 0){
      jpeg(paste('ORA/raw_pval_GO_', title_name, '.jpeg', sep = ''), units="in", width=10, height=10, res=500)
      print(dotplot(ego, showCategory=50))
      dev.off()
    }
  }
  ### KEGG (did not enrich any pathways)
  # enrich
  allOE_genes.entrezid <- as.character(processed.res$ENTREZID)
  sigOE.entrezid <- dplyr::filter((processed.res), get(adj.p.val) < 0.05)
  sigOE_genes.entrezid <- as.character(sigOE$ENTREZID)

  ekegg <- enrichKEGG(gene = sigOE_genes.entrezid,
                      universe = allOE_genes.entrezid,
                      organism = 'mmu',
                      keyType = "ncbi-geneid",
                      pAdjustMethod = "BH",
                      qvalueCutoff = 0.05)
  
  
  if (!is.null(ekegg)){
    if (sum(ekegg@result$p.adjust < 0.05) > 0){
      jpeg(paste('ORA/adj_pval_KEGG_', title_name, '.jpeg', sep = ''), units="in", width=10, height=10, res=500)
      print(dotplot(ekegg, showCategory=50))
      dev.off()
    }
  }
  
  
  allOE_genes.entrezid <- as.character(processed.res$ENTREZID)
  sigOE.entrezid <- dplyr::filter((processed.res), get(raw.p.val) < 0.05)
  sigOE_genes.entrezid <- as.character(sigOE$ENTREZID)

  ekegg <- enrichKEGG(gene = sigOE_genes.entrezid,
                      universe = allOE_genes.entrezid,
                      organism = 'mmu',
                      keyType = "ncbi-geneid",
                      pAdjustMethod = "BH",
                      qvalueCutoff = 0.05)
  
  if (!is.null(ekegg)){
    if (sum(ekegg@result$p.adjust < 0.05) > 0){
      jpeg(paste('ORA/raw_pval_KEGG_', title_name, '.jpeg', sep = ''), units="in", width=10, height=10, res=500)
      print(dotplot(ego, showCategory=50))
      dev.off()
    }
  }
  
  # 
  # ekegg
  # ego
  
  # print(dotplot(ekegg, showCategory=50))
  
  #################################### over representation analysis #######################################
  
  #################################### GSEA  #################################### 
  #all_gene_sets
  #all_gene_sets$gs_name %>% unique()
  #all_gene_sets$gs_cat %>% unique()
  #all_gene_sets$gs_subcat %>% unique()
  
  terms2gene = all_gene_sets[, c('gs_name', 'entrez_gene' )]
  # terms2gene = all_gene_sets[, c('gs_name', 'gene_symbol' )]
  
  
  #kegg <- read.gmt('msigDB/c2.cp.kegg.v7.2.entrez.gmt')
  #reactome <- read.gmt('msigDB/c2.cp.reactome.v7.2.entrez.gmt')
  #go <- read.gmt('msigDB/c5.all.v7.2.entrez.gmt')
  #comb.ontology = bind_rows(kegg, reactome, go)
  #comb.ontology %>% head()
  
  # foldchanges = processed.res[,l2fc] * -log(processed.res[,raw.p.val], 10)
  foldchanges = processed.res[,l2fc] * -log(processed.res[,adj.p.val], 10)
  names(foldchanges) = processed.res$ENTREZID
  # names(foldchanges) = processed.res$SYMBOL
  foldchanges = foldchanges[which(!is.na(names(foldchanges)))]
  foldchanges = foldchanges[which(!is.na((foldchanges)))]
  foldchanges = foldchanges[order(foldchanges, decreasing = T)]
  foldchanges
  # msig <- GSEA(foldchanges, TERM2GENE=all_gene_sets, verbose=T,nPermSimple = 10000)
  msig <- GSEA(foldchanges, TERM2GENE=terms2gene, verbose=T,nPermSimple = 10000)
  
  msig_df <- data.frame(msig)
  msig_df = msig_df[msig_df$p.adjust<0.05,]
  # test.msig_df = msig_df
  # test.msig_df%>%View()
  
  jpeg(paste('GSEA/adj_pval_', title_name, '.jpeg', sep = ''), units="in", width=20, height=10, res=500)
  gg_obj = ggplot(msig_df, aes(reorder(Description, NES), NES)) +
    geom_col(aes(fill=p.adjust<0.05)) +
    coord_flip() +
    labs(x="Pathway", y="Normalized Enrichment Score")+
    theme_minimal()
  print(gg_obj)
  dev.off()
  
  foldchanges = processed.res[,l2fc] * -log(processed.res[,raw.p.val], 10)
  # foldchanges = processed.res[,l2fc] * -log(processed.res[,adj.p.val], 10)
  names(foldchanges) = processed.res$ENTREZID
  foldchanges = foldchanges[which(!is.na(names(foldchanges)))]
  foldchanges = foldchanges[which(!is.na((foldchanges)))]
  foldchanges = foldchanges[order(foldchanges, decreasing = T)]
  foldchanges
  # msig <- GSEA(foldchanges, TERM2GENE=all_gene_sets, verbose=T,nPermSimple = 10000)
  msig <- GSEA(foldchanges, TERM2GENE=terms2gene, verbose=T,nPermSimple = 10000)
  
  msig_df <- data.frame(msig)
  msig_df = msig_df[msig_df$p.adjust<0.05,]
  
  jpeg(paste('GSEA/raw_pval_', title_name, '.jpeg', sep = ''), units="in", width=20, height=10, res=500)
  gg_obj = ggplot(msig_df, aes(reorder(Description, NES), NES)) +
    geom_col(aes(fill=p.adjust<0.05)) +
    coord_flip() +
    labs(x="Pathway", y="Normalized Enrichment Score")+
    theme_minimal()
  print(gg_obj)
  dev.off()
  #### GSEA ###
}

sixty.l2fc = colnames(processed.res)[grep("^(?=.*60)(?=.*v.Ground)(?!.*30)(?!.*1)(?!.*Group)(?=.*Log2fc)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)]
sixty.adj.p.val = colnames(processed.res)[grep("^(?=.*60)(?=.*v.Ground)(?!.*30)(?!.*1)(?!.*Group)(?=.*Adj.p.val)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)]
sixty.raw.p.val = colnames(processed.res)[grep("^(?=.*60)(?=.*v.Ground)(?!.*30)(?!.*1)(?!.*Group)(?=.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)]
# results_plot(sixty.l2fc, sixty.adj.p.val, sixty.raw.p.val, 'sixty')

thirty.l2fc = colnames(processed.res)[grep("^(?=.*30)(?=.*v.Ground)(?!.*60)(?!.*1)(?!.*Group)(?=.*Log2fc)(?!.*P\\.value_)(?=.*30).*$", colnames(processed.res), perl = T)]
thirty.adj.p.val = colnames(processed.res)[grep("^(?=.*30)(?=.*v.Ground)(?!.*60)(?!.*1)(?!.*Group)(?=.*Adj.p.val)(?!.*P\\.value_)(?=.*30).*$", colnames(processed.res), perl = T)]
thirty.raw.p.val = colnames(processed.res)[grep("^(?=.*30)(?=.*v.Ground)(?!.*60)(?!.*1)(?!.*Group)(?=.*P\\.value_)(?=.*30).*$", colnames(processed.res), perl = T)]
results_plot(thirty.l2fc, thirty.adj.p.val, thirty.raw.p.val, 'thirty')

thirty.sixty.l2fc = colnames(processed.res)[grep("^(?=.*30)(?!.*Control)(?!.*1)(?!.*Group)(?=.*Log2fc)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)][2]
thirty.sixty.adj.p.val = colnames(processed.res)[grep("^(?=.*30)(?!.*Control)(?!.*1)(?!.*Group)(?=.*Adj.p.val)(?!.*P\\.value_)(?=.*60).*$", colnames(processed.res), perl = T)][2]
thirty.sixty.raw.p.val = colnames(processed.res)[grep("^(?=.*30)(?!.*Control)(?!.*1)(?!.*Group)(?=.*P\\.value_)(?=.*30).*$", colnames(processed.res), perl = T)][2]
# results_plot(thirty.sixty.l2fc, thirty.sixty.adj.p.val, thirty.sixty.raw.p.val, 'thirty_sixty')



### out_CSV files
# write_csv_func = function(p.val, days, p.val.name, name){
#   outfile = processed.res[which(processed.res[, p.val] < 0.05),c(colnames(processed.res)[1:4],
#                                                                  get(paste0(days, '.l2fc')),
#                                                                  get(paste0(days, '.adj.p.val')),
#                                                                  get(paste0(days, '.raw.p.val')))]
#   downfile = outfile[order(outfile[,get(paste0(days, '.l2fc'))]),][1:50,]
#   upfile = outfile[order(outfile[,get(paste0(days, '.l2fc'))], decreasing = T),][1:50,]
#   allfile = outfile[order(outfile[,get(paste0(days, '.l2fc'))]),]
#   write.csv(downfile, paste0('out_csv/', name, 'down_', p.val.name, '.csv'))
#   write.csv(upfile, paste0('out_csv/', name, 'up_', p.val.name, '.csv'))
#   write.csv(allfile, paste0('out_csv/', name, 'all_', p.val.name, '.csv'))
# }
# write_csv_func(sixty.adj.p.val, 'sixty',  'adjP', 'ISS60/ISS_60_flight_vs_GC_')
# write_csv_func(sixty.raw.p.val, 'sixty',  'rawP', 'ISS60/ISS_60_flight_vs_GC_')
# write_csv_func(thirty.adj.p.val, 'thirty', 'adjP', 'LAR30/LAR_30_flight_vs_GC_')
# write_csv_func(thirty.raw.p.val, 'thirty', 'rawP', 'LAR30/LAR_30_flight_vs_GC_')
# write_csv_func(thirty.sixty.adj.p.val, 'thirty.sixty', 'adjP', 'ISS60_vs_LAR30/ISS_60_flight_vs_LAR_30_flight_')
# write_csv_func(thirty.sixty.raw.p.val, 'thirty.sixty', 'rawP', 'ISS60_vs_LAR30/ISS_60_flight_vs_LAR_30_flight_')
# 
# 
# 
# outfile = processed.res[which(processed.res[, sixty.raw.p.val] < 0.05),c(colnames(processed.res)[1:4], sixty.l2fc, sixty.adj.p.val, sixty.raw.p.val)]
# downfile = outfile[order(outfile[,sixty.l2fc]),][1:50,]
# upfile = outfile[order(outfile[,sixty.l2fc], decreasing = T),][1:50,]
# write.csv(downfile, 'out_csv/ISS_60_flight_vs_GC_down_rawP.csv')
# write.csv(upfile, 'out_csv/ISS_60_flight_vs_GC_up_rawP.csv')
