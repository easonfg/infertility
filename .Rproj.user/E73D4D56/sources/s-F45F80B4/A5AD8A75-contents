## only using AMH on DOR diagnosis

rm(list=ls())

library(pROC)
library(glmnet)
library(ggpubr)
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyverse)
library(aod)

org.data = read.csv('../cleaned.infertile.data.csv')
org.data$Infertility.diagnosis = toupper(org.data$Infertility.diagnosis)

org.data = org.data[-grep('DOR, ENDO', org.data$Infertility.diagnosis), ]

LOD = org.data[org.data$X == 'LOD', , drop = F]

all.res = data.frame()
# for (diag in c('RPL', 'DOR', 'PCOS', 'ENDOMETRIOSIS', 'UNEXPLAINED')){
# for (diag in c('DOR', 'PCOS', 'ENDOMETRIOSIS', 'UNEXPLAINED')){
for (diag in c('DOR')){
  
  ### filter out missing values
  infertility.data = org.data[org.data$Missing != 1,]
  
  ### keep only certain diseases
  # infertility.data = infertility.data[infertility.data$Fertile == 1 |grepl('RPL', infertility.data$Infertility.diagnosis),]
  # infertility.data = infertility.data[infertility.data$Fertile == 1 |grepl('DOR', infertility.data$Infertility.diagnosis),]
  # infertility.data = infertility.data[infertility.data$Fertile == 1 |grepl('PCOS', infertility.data$Infertility.diagnosis),]
  # infertility.data = infertility.data[infertility.data$Fertile == 1 |grepl('endometriosis', infertility.data$Infertility.diagnosis),]
  # infertility.data = infertility.data[infertility.data$Fertile == 1 |grepl('explained', infertility.data$Infertility.diagnosis),]
  
  infertility.data = infertility.data[infertility.data$Fertile == 1 |grepl(diag, infertility.data$Infertility.diagnosis),]
  #infertility.data %>% View()
  infertility.data$Infertility.diagnosis
  
  ### retain only values from R collection date
  #infertility.data = infertility.data[grep('R$', infertility.data$CD.of.blood.draw),]
  # infertility.data = infertility.data[grep('R', infertility.data$CD.of.blood.draw),]
  
  ### remove NA row
  infertility.data = infertility.data[!is.na(infertility.data$X),]
  #infertility.data %>% View()
  #rownames(infertility.data))
  
  ### extract cytokines data
  cytokines.data = infertility.data[grep('IL8', colnames(infertility.data)):grep('CSF1', colnames(infertility.data))]
  
  ### get rid of cytokines with more than 50% missing values
  # n.missing = sapply(colnames(cytokines.data), function(x){
  #   LOD = cytokines.data[nrow(cytokines.data),x]
  #   sum(cytokines.data[,x] < LOD)
  # })
  # cytokines.data = cytokines.data[,n.missing/nrow(cytokines.data) < 0.5]
  
  ### turn all values lower than LOD to LOD
  for (col.i in colnames(cytokines.data)){
    LOD_x = as.numeric(LOD[col.i])
    cytokines.data[which(cytokines.data[,col.i] < LOD_x), col.i] = LOD_x
  }
  
  cytokines.data = data.frame(cytokines.data)
  
  fertile.data = bind_cols(infertility.data[, c('Fertile','AMH', 'CD.of.blood.draw', 'Age', 'BMI')], cytokines.data)
  fertile.data$Fertile = factor(1 - fertile.data$Fertile)
  fertile.data$Age = log(fertile.data$Age, 2)
  fertile.data$BMI = log(fertile.data$BMI, 2)
  # fertile.data$Age = rnorm(nrow(fertile.data), mean = log(24,2), sd = 3)
  # fertile.data$BMI = rnorm(nrow(fertile.data), mean = log(24,2), sd = 3)
  
  
  ## remove columsn with single unique value ##
  fertile.data = Filter(function(x)(length(unique(x))>1), fertile.data)
  str(fertile.data)
  
  lm.model = lm(Fertile~AMH + BMI + Age, data = fertile.data)
  lm.model = lm(AMH~Fertile + BMI + Age, data = fertile.data)
  summary(lm.model)
  glm.model = glm(Fertile~AMH + BMI + Age, data = fertile.data, family = binomial(link="logit"))
  #glm.model = glm(as.formula(paste0('Fertile~ ', paste(colnames(fertile.data)[4:ncol(fertile.data)], collapse = '+'))),
  #                data = fertile.data, family = binomial(link="logit"))
  summary(glm.model)
  
  for (col in colnames(fertile.data)){
    fertile.data[is.na(fertile.data[,col]),col] = mean(fertile.data[,col], na.rm = T)
  }
  
  
  cv.amh <- cv.glmnet(as.matrix(fertile.data[,c('AMH', 'Age', 'BMI')]),
                  fertile.data$Fertile,
                  family = "binomial", nfold = nrow(fertile.data), type.measure = "auc", paralle = TRUE)
  
  plot(cv.amh)
  
  return_features = function(coeff){
    top_features = data.frame(name = coeff@Dimnames[[1]][coeff@i + 1], coefficient = coeff@x)
    top_features = top_features[order(top_features$coefficient),]
    # print(top_features)
    return(top_features)
  }
  
  tvec.amh = return_features(coef(cv.amh, s = 'lambda.min'))$coefficient
  names(tvec.amh) = return_features(coef(cv.amh, s = 'lambda.min'))$name
  (tvec.amh)
  
  cv <- cv.glmnet(as.matrix(fertile.data[,c(4:ncol(fertile.data))]),
  # cv <- cv.glmnet(as.matrix(fertile.data[,c(3:ncol(fertile.data))]),
  # cv <- cv.glmnet(as.matrix(fertile.data[,c(4:10)]),
                  fertile.data$Fertile,
                  family = "binomial", nfold = nrow(fertile.data), type.measure = "auc", paralle = TRUE)
  
  plot(cv)
  
  
  tvec = return_features(coef(cv, s = 'lambda.min'))$coefficient
  names(tvec) = return_features(coef(cv, s = 'lambda.min'))$name
  (tvec)
  
  res.coef = c()
  max.auc = c()
  res.coef.values = c()
  for (all.rep in 1:10){
    for (j in 1:10){
      print(paste('I: ', all.rep, 'J: ', j))
      md3cv <- cv.glmnet(as.matrix(fertile.data[,c(4:ncol(fertile.data))]),
                         fertile.data$Fertile,
                         family = "binomial", nfold = 3, type.measure = "auc", paralle = TRUE)
      # plot(md3cv)
      
      return_features = function(coeff){
        top_features = data.frame(name = coeff@Dimnames[[1]][coeff@i + 1], coefficient = coeff@x)
        top_features = top_features[order(top_features$coefficient),]
        # print(top_features)
        return(top_features)
      }
      
      tvec = return_features(coef(md3cv, s = 'lambda.min'))$coefficient
      names(tvec) = return_features(coef(md3cv, s = 'lambda.min'))$name
      
      res.coef.values = c(res.coef.values, tvec)
      
      res.coef = c(res.coef, return_features(coef(md3cv, s = 'lambda.min'))$name)
      max.auc = c(max.auc, max(md3cv$cvm))
      # print(res.coef)
      # print(max.auc)
      # res.coef$name
    }
    print(mean(max.auc))
    print(sd(max.auc))
    #jpeg(paste('pred_within_subtypes_res/Moderate/lasso/Moderate_binary_glmnet_example.jpeg', sep = ''),
    #     units="in", width=10, height=10, res=500)
    #plot(md3cv)
    #dev.off()
  }
  
  df.res.coef.values = data.frame(res.coef.values)
  df.res.coef.values$names = names(res.coef.values)
  
}

library(ggplot2)
library(dplyr)
library(tibble)

## count from the 100 reps
binary.coef.values = df.res.coef.values
genes.count = table(binary.coef.values$names)
df.genes.count = data.frame(genes.count)
df.genes.count = df.genes.count %>% column_to_rownames(var = 'Var1')
hist(genes.count[order(genes.count, decreasing = T)])
(genes.count[order(genes.count, decreasing = T)])

coef.means = binary.coef.values %>% group_by(names) %>%
  summarize(coef_means = mean(res.coef.values, na.rm = TRUE))

## weighted coef base on number of appearances in the 100 reps
coef.means = coef.means %>% column_to_rownames(var = "names") 
coef.means
# coef.means * 
weighted.coef = coef.means * df.genes.count[rownames(coef.means),]
weighted.coef = weighted.coef[-1,, drop = FALSE]
head(weighted.coef)
weighted.coef = data.frame(scale(weighted.coef))
weighted.coef = weighted.coef[order(weighted.coef, decreasing = T),,drop = FALSE ]
weighted.coef

#write.csv((genes.count[order(genes.count, decreasing = T)])[-1], 'res/all_proteins/binary_ordered_genes_count.csv')
#write.csv(weighted.coef, 'res/all_proteins/binary_weighted_coef.csv')
#write.csv(coef.means, 'res/all_proteins/binary_mean_coef.csv')

graph.data = coef.means
graph.data$freq = genes.count[rownames(graph.data)]
graph.data = graph.data[-1,]

graph.data$names = sapply(strsplit(rownames(graph.data),'\\.'), function(x) x[1])

library(ggrepel)
ggplot(graph.data, aes(coef_means, freq, label = names)) +
  # ggplot(graph.data, aes(freq, coef_means)) +
  geom_point(aes(color = abs(coef_means))) +
  # geom_text(aes(label=names),size = 3, hjust=-0.5, vjust=0.5) +
  # geom_text(aes(label=ifelse(freq>75,as.character(names),'')),size = 3, hjust=-0.5, vjust=0.5) +
  geom_text_repel() +
  # nudge_y       = 32 - subset(graph.data, freq > 25)$freq,
  # size          = 4,
  # box.padding   = 1.5,
  # point.padding = 0.5,
  # force         = 100,
  # segment.size  = 0.2,
  # segment.color = "grey50",
  # direction     = "x") +
  xlab("Average Coefficients") + 
  ylab("Frequencies") +
  labs(color='Absolute Average\ 
       Coefficients') + ## legend title
  ggtitle('Binary Prediction (Severe A)')+
  theme_bw()

### cytokines scores
score.coef = coef.means[-1,,drop = F]
score.coef = coef.means[-c(1,2,3),,drop = F]
scores = as.matrix(fertile.data[,rownames(score.coef)])%*% as.matrix(score.coef$coef_means)%>% as.vector()
scores

auc(roc(fertile.data$Fertile, scores))

###AMH scores
amh.score.coef = data.frame(tvec.amh)[-1, , drop = F]
amh.score.coef = data.frame(tvec.amh)[-c(1,3,4), , drop = F]
amh.score.coef
amh.scores = as.matrix(fertile.data[,rownames(amh.score.coef)])%*% as.matrix(amh.score.coef$tvec.amh)%>% as.vector()
amh.scores
length(fertile.data$Fertile)
auc(roc(fertile.data$Fertile, amh.scores))

###AMH org scores
org.amh.scores = as.matrix(fertile.data[,'AMH'])%>% as.vector()
auc(roc(fertile.data$Fertile, org.amh.scores))

#weighted scores
weighted.coef
weighted.score.coef = weighted.coef[-c(1,2),,drop = F]
weighted.score.coef
weighted.scores = as.matrix(fertile.data[,rownames(weighted.score.coef)])%*% as.matrix(weighted.score.coef$coef_means)%>% as.vector()
auc(roc(fertile.data$Fertile, weighted.scores))

#all.res
#all.res[,'padj'] = p.adjust(all.res[,2], method = 'fdr')
#print('adj p')
#print(all.res[all.res$padj < 0.1,])
#print('raw p')
#print(all.res[all.res$P < 0.05,])
#
#sub_padj = c()
#for (diag in all.res$diag %>% unique()){
#  sub_padj = c(sub_padj, p.adjust(all.res[all.res$diag == diag, 'P'], method = 'fdr'))
#}
#all.res$sub.padj = sub_padj
#all.res[all.res$sub.padj < 0.05,]
#
#
### change rownames to column
#all.res = all.res %>% rownames_to_column('Cytokines')
#all.res$Cytokines = sapply(strsplit(all.res$Cytokines, '\\.\\.\\.'), function(x) x[1])
#
#### dot plot of p values
#dot.plot.data = all.res
#dot.plot.data
#
#gg.res = ggplot(subset(dot.plot.data, P < 0.05), aes(diag, Cytokines)) + 
#  geom_point(aes(size = -log10(padj), fill = V1), 
#             colour = 'black', shape = 21) + 
#  geom_text(aes(label=round(V1,2)),size = 3, hjust=-0.5, vjust=0.5) +
#  scale_fill_gradient2(low = 'blue', mid = 'white', high = 'red') +
#  ylab('') + xlab('') +
#  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 11)) +
#  labs(size = '-log10(FDR)', fill = 'coefficients') +
#  theme_bw()
#print(gg.res)
#### dot plot of p values
#
#### plotting the significant R only cytokines (CXCL9)
## plot.data = org.data[grepl('RPL|DOR|PCOS|ENDOMETRIOSIS|UNEXPLAINED',org.data$Infertility.diagnosis) | org.data$Fertile == 1,]
#plot.data = org.data[grepl('DOR|PCOS|ENDOMETRIOSIS',org.data$Infertility.diagnosis) | org.data$Fertile == 1,]
#plot.data = plot.data[grep('R$', plot.data$CD.of.blood.draw),]
## plot.data = plot.data[grep('R', plot.data$CD.of.blood.draw),]
## plot.data %>% View()
#
#for (x in c('RPL','ENDOMETRIOSIS', 'DOR', 'PCOS',  'UNEXPLAINED')){
#  plot.data[grep(x, plot.data$Infertility.diagnosis), 'Infertility.diagnosis'] = x
#}
#plot.data[plot.data$Fertile == 1, 'Infertility.diagnosis'] = 'FERTILE'
#plot.data$Infertility.diagnosis = factor(plot.data$Infertility.diagnosis,
#                                         levels = c('FERTILE', 'RPL', 'DOR', 'PCOS', 'ENDOMETRIOSIS', 'UNEXPLAINED'))
#
#### plotting the significant R only cytokines (CXCL9)
#my_comparisons <- list( #c('FERTILE', 'DOR'),  c('FERTILE', 'PCOS'),
#  #c('FERTILE', 'RPL'),  c('FERTILE', 'UNEXPLAINED'),
#  c('FERTILE', 'ENDOMETRIOSIS'))
## ggboxplot(plot.data, x = "Infertility.diagnosis", y = "CXCL9",
## ggboxplot(plot.data, x = "Infertility.diagnosis", y = "ST1A1",
#ggboxplot(plot.data, x = "Infertility.diagnosis", y = "IL1B",
#          color = "Infertility.diagnosis", palette = "jco", add = "jitter") + 
#  stat_compare_means(comparisons = my_comparisons) + # Add pairwise comparisons p-value
#  theme(legend.position="none")
## stat_compare_means(method = "t.test") 
#
#plot.data %>% 
#  ggplot(aes(x=Infertility.diagnosis,y=CXCL9, label = CD.of.blood.draw, color=Infertility.diagnosis))+
#  geom_boxplot(width=.5)+
#  # jittered text with geom_text
#  geom_text(
#    position=position_jitter(width=0.15))+
#  theme_classic()+
#  theme(legend.position="none")
#### plotting the significant R only cytokines (CXCL9)
#
#
####plotting by diagnosis###
#infertility.data = org.data[org.data$Missing != 1,]
#
#### retain only values from R collection date
#infertility.data = infertility.data[grep('R$', infertility.data$CD.of.blood.draw),]
## infertility.data = infertility.data[grep('R', infertility.data$CD.of.blood.draw),]
#
#### remove NA row
#infertility.data = infertility.data[!is.na(infertility.data$X),]
#
#### extract cytokines data
#cytokines.data = infertility.data[grep('IL8', colnames(infertility.data)):grep('CSF1', colnames(infertility.data))]
#cytokines.data
#
#### turn all values lower than LOD to LOD
#for (col.i in colnames(cytokines.data)){
#  LOD_x = as.numeric(LOD[col.i])
#  cytokines.data[cytokines.data[,col.i] < LOD_x, col.i] = LOD_x
#}
#
#fertile.data = bind_cols(infertility.data[, c('Fertile', 'Infertility.diagnosis')], cytokines.data)
#
#long.fertile.data = gather(fertile.data, cytokines, measurements, IL8:CSF1, factor_key=TRUE)
#long.fertile.data
#long.fertile.data[long.fertile.data$Fertile == 1, 'Infertility.diagnosis'] = 'FERTILE'
#long.fertile.data%>%head()
#
#for (diag_i in unique(all.res$diag)){
#  sig.res = all.res[all.res$P < 0.05, ]
#  unique.cyto = sig.res[sig.res$diag == diag_i,'Cytokines'] %>% unique()
#  sub.plot.data.infertile = long.fertile.data[grep(diag_i, long.fertile.data$Infertility.diagnosis),]
#  sub.plot.data.infertile = sub.plot.data.infertile[sub.plot.data.infertile$cytokines %in% unique.cyto ,]
#  sub.plot.data.infertile$Infertility.diagnosis = diag_i
#  
#  sub.plot.data.FERTILE = long.fertile.data[grep('FERTILE', long.fertile.data$Infertility.diagnosis),]
#  sub.plot.data.FERTILE = sub.plot.data.FERTILE[sub.plot.data.FERTILE$cytokines %in% unique.cyto ,]
#  sub.plot.data.FERTILE$Infertility.diagnosis = 'FERTILE'
#  
#  sub.plot.data = bind_rows(sub.plot.data.infertile, sub.plot.data.FERTILE)
#  sub.plot.data$Infertility.diagnosis = factor(sub.plot.data$Infertility.diagnosis, levels = c('FERTILE', diag_i))
#  
#  cyto.chunks.diag = split(unique(sub.plot.data$cytokines), ceiling(seq_along(unique(sub.plot.data$cytokines))/20))
#  
#  pdf(paste0('DOR_analysis/results/', diag_i, '.pdf'), height = 10, width = 20, onefile = TRUE)
#  for (i in cyto.chunks.diag){
#    temp.fertile.data.diag = sub.plot.data[sub.plot.data$cytokines %in% i, ]
#    print(
#      ggboxplot(temp.fertile.data.diag, x = "Infertility.diagnosis", y = 'measurements',
#                color = "Infertility.diagnosis", palette = "jco", add = "jitter") + 
#        # stat_compare_means(comparisons = my_comparisons) + # Add pairwise comparisons p-value
#        theme(legend.position="none")+
#        facet_wrap(vars(cytokines), scales = 'free', nrow = 2)
#    )
#  }
#  dev.off()
#}
####plotting by  diagnosis###
#